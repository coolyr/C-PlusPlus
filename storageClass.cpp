/***************************************************
* Author: coolyr
* Mail: yunrong@pku.edu.cn
* Description:
***************************************************/

// <1> auto 存储类是所有局部变量默认的存储类。
//
// <2> register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）。
//
// <3> static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。
//static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。
//在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。
//
// <4> extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。
// 当您使用 'extern' 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。
//当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 extern 来得到已定义的变量或函数的引用。
//可以这么理解，extern 是用来在另一个文件中声明一个全局变量或函数
//
// <5> mutable 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。
#include <iostream>
using namespace std;

static int count = 10;//全局变量
//函数声明
void func(void);

int main(int argc, char** argv, char** envp){

    //int count = 10;
    while(count--)
    {
        func();
    }
    return 0;    
}

//函数定义
void func(void)
{
    static int i = 5; //局部静态变量
    i++;
    cout << "i :  " << i << endl;

    //cout << ", count : " << count << endl;
}

